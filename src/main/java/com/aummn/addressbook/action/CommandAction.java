package com.aummn.addressbook.action;

import com.aummn.addressbook.cmd.Command;
import com.aummn.addressbook.cmd.CommandHolder;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.util.HashMap;
import java.util.Map;


/**
 * This class is used to provide a single control point to the elements
 * which executes the same function.
 *
 * @author James Jin
 * @version 1.0 25/07/2018
 * @since 1.0
 */
public class CommandAction extends AbstractAction implements CommandHolder {
    
    /**
     * A <code>Command</code> object stored in this object.
     * It will be invoked by <code>ActionEvent</code>.
     */
    private Command buttonCommand;
    
    /**
     * This <code>Map</code> object is used to store the <code>Action</code>
     * constants.
     */
    private Map properties;


    public CommandAction() {}

    /**
     * Creates a <code>CommandAction</code> object with specified name, image,
     * description, mnemonic key and accelerator key.
     *
     * @param name the name of the action
     * @param image the icon for the action
     * @param description the short description of the action
     * @param mnemonic the mnemonic for the action
     * @param acceleratorKey the <code>KeyStroke</code> to be used as
     * the accelerator key for the action
     */
    public CommandAction(String name, Icon image, String description,
                         Integer mnemonic, KeyStroke acceleratorKey) {
        
        properties = new HashMap();
        
        properties.put(Action.NAME, name);
        properties.put(Action.SMALL_ICON, image);
        properties.put(Action.SHORT_DESCRIPTION, description);
        properties.put(Action.MNEMONIC_KEY, mnemonic);
        properties.put(Action.ACCELERATOR_KEY, acceleratorKey);
        
    }
    
    /**
     * stores a value in a constant in Action
     *
     * @param key one of constans of <code>Action</code>
     * @param value an <code>Object</code> added to <code>Action</code>
     */
    public void putValue(String key, Object value) {
        
        properties.put(key, value);
        
    }
    
    /**
     * gets the value of a constant in <code>Action</code>
     *
     * @return the value of the specified constant
     */
    public Object getValue(String key) {
        
        return properties.get(key);
        
    }
    
    /**
     * Stores a <code>Command</code> to this object.
     * That <code>Command</code> object will be invoked by
     * the <code>ActionEvent</code>
     *
     * @param comd an object implementing the <code>Command</code> interface
     */
    public void setCommand(Command comd) {
        
        buttonCommand = comd;
        
    }
    
    /**
     * Gets a <code>Command</code> object.
     *
     * @return a <code>Command</code> for this object
     */
    public Command getCommand() {
        
        return buttonCommand;
        
    }
    
    /**
     * Executes the task specified by a <code>Command</code> object.
     *
     * @param event a <code>ActionEvent</code> generated by
     * a <code>Component</code>
     */
    public void actionPerformed(ActionEvent event) {
        
        if (buttonCommand != null) {
            
            buttonCommand.execute();
            
        }
        
    }
    
}